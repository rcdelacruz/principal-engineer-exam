name: Automated Evaluation

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '20'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript check
        run: npm run type-check
        continue-on-error: true
        
      - name: Lint check
        run: npm run lint
        continue-on-error: true
        
      - name: Format check
        run: npm run format:check
        continue-on-error: true
        
      - name: Architecture documentation check
        run: |
          echo "📋 Checking required documentation..."
          
          required_docs=(
            "docs/ARCHITECTURE.md"
            "docs/API.md"
            "docs/DEPLOYMENT.md"
            "docs/SCALING.md"
            "docs/SECURITY.md"
          )
          
          missing_docs=()
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              missing_docs+=("$doc")
              echo "❌ Missing: $doc"
            else
              echo "✅ Found: $doc"
            fi
          done
          
          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "⚠️  Missing documentation files: ${missing_docs[*]}"
            echo "This will affect your evaluation score."
          else
            echo "✅ All required documentation found!"
          fi

  testing:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techflow_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techflow_test
          REDIS_URL: redis://localhost:6379
        continue-on-error: true
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techflow_test
          REDIS_URL: redis://localhost:6379
        continue-on-error: true
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techflow_test
          REDIS_URL: redis://localhost:6379
        continue-on-error: true
      
      - name: Generate test coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techflow_test
          REDIS_URL: redis://localhost:6379
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for vulnerable dependencies
        run: npx audit-ci --moderate
        continue-on-error: true
      
      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
        continue-on-error: true

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build applications
        run: npm run build
        continue-on-error: true
      
      - name: Check bundle size
        run: npm run analyze:bundle
        continue-on-error: true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: npm run build
        continue-on-error: true
      
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        continue-on-error: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: techflow_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
        continue-on-error: true
      
      - name: Start application
        run: npm run start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/techflow_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
      
      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000
      
      - name: Run E2E tests
        run: npm run test:e2e
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results
          path: test-results/

  evaluation-summary:
    name: Evaluation Summary
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security, build, performance, e2e-tests]
    if: always()
    
    steps:
      - name: Generate evaluation report
        run: |
          echo "# 🎯 Principal Engineer Exam - Evaluation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Code Quality Results
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ **Code Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Testing Results
          if [ "${{ needs.testing.result }}" == "success" ]; then
            echo "✅ **Testing**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Testing**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security Results
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build Results
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance Results
          if [ "${{ needs.performance.result }}" == "success" ]; then
            echo "✅ **Performance**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # E2E Results
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ **E2E Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Evaluation Criteria" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality & Architecture (35%)**: TypeScript usage, design patterns, clean code" >> $GITHUB_STEP_SUMMARY
          echo "- **System Design Thinking (30%)**: Architecture documentation, scalability decisions" >> $GITHUB_STEP_SUMMARY
          echo "- **Problem-solving Approach (20%)**: Creative solutions, edge case handling" >> $GITHUB_STEP_SUMMARY
          echo "- **DevOps/Deployment Skills (15%)**: CI/CD, infrastructure, monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review failed checks and address issues" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure all required documentation is complete" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify deployment works end-to-end" >> $GITHUB_STEP_SUMMARY
          echo "4. Schedule technical interview for code walkthrough" >> $GITHUB_STEP_SUMMARY